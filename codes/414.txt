/* File copied from github.com/httpstatuses/httpstatuses [566cc03 on May 16, 2022] */

---
set: 4
code: 414
title: Request-URI Too Long
references:
    ".NET HTTP Status Enum": "HttpStatusCode.RequestUriTooLong"
    "Rust HTTP Status Constant": "http::StatusCode::URI_TOO_LONG"
    "Rails HTTP Status Symbol": ":request_uri_too_long"
    "Go HTTP Status Constant": "http.StatusRequestURITooLong"
    "Symfony HTTP Status Constant": "Response::HTTP_REQUEST_URI_TOO_LONG"
    "Python2 HTTP Status Constant": "httplib.REQUEST_URI_TOO_LONG"
    "Python3+ HTTP Status Constant": "http.client.REQUEST_URI_TOO_LONG"
    "Python3.5+ HTTP Status Constant": "http.HTTPStatus.REQUEST_URI_TOO_LONG"
---

The server is refusing to service the request because the request-target<sup>[1](#ref-1)</sup> is longer than the server is willing to interpret.

This rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a "black hole" of redirection (e.g., a redirected URI prefix that points to a suffix of itself) or when the server is under attack by a client attempting to exploit potential security holes.

A 414 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls <sup>[2](#ref-2)</sup>.

---

* <span id="ref-1"><sup>1</sup> Content Negotiation [RFC7230 Section 5.3][2]</span>
* <span id="ref-2"><sup>2</sup> Calculating Heuristic Freshness RFC7234 Section 4.2.2][3]</span>
* Source: [RFC7231 Section 6.5.12][1]

[1]: <https://tools.ietf.org/html/rfc7231#section-6.5.12>
[2]: <https://tools.ietf.org/html/rfc7231#section-5.3>
[3]: <https://tools.ietf.org/html/rfc7234#section-4.2.2>
